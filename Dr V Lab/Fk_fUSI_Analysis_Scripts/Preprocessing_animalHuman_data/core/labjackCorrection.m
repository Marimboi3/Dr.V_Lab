% function that corrects the time slip between the behavioral controller
% machine clock and the fUS host machine clock. This is accomplished using
% a 'clapboard', i.e. a digital pulse generated by the behavioral
% controller each time the NHP receives a reward in the form of an analog
% signal via BNC to the reward solenoid. This signal is read by a labjack
% ADC and sent as a digital pulse to the fUS host where it is recorded in
% a text file and read in here. This script looks for the difference in
% timing between the data logs of the two machines according to this pulse
% as ground truth. 
% 
% t_mem_behavior_s = labjackCorrection(session, run,  behavior)
%
% t_mem_behavior_s is a vector of clock times in seconds where each memory
% period began. These clock seconds are corrected to correspond to the fUS
% host and thus the fUS time log. 

function t_mem_behavior_s = labjackCorrection(session, run, behavior)
% load behavioral data (if not passed in directly)
if ~exist('behavior','var')
    load SessionInfo.mat %#ok<*LOAD>

    sessionRows = find(SessionInfo.Session == session);
    runRows = find(SessionInfo.Run == run);
    rowOfInterest = intersect(sessionRows,runRows);

    startPath = cd(getUserDataPath('pathType','Behavioral','session',session,'run',run));
    behavioralFileStr = SessionInfo.behaviorFileName(rowOfInterest);
    load(behavioralFileStr)
    cd(startPath)
end

% separate successful and unsuccessful trials
success = cell2mat({behavior.success});
behaviorSuccessOnly = behavior;
behaviorSuccessOnly(~success) = [];

%% load labjack data 
startPath = cd(getUserDataPath('pathType','fUS','session',session,'run',run));
if ~exist('labjackLog.txt','file')
    warning('lab jack file not found')
    return
end

%% labjack log: times and voltages
labjacklog = abs(textread('labjackLog.txt', '%f')); %#ok<DTXTRD>
labjacklog = reshape(labjacklog,4, [])'; % reshape to [HH MM SS.MS Voltage]
t_labjacklog = labjacklog(:,1:3); % Labjack acq times [HH MM SS.MS]
t_labjacklog_s = t_labjacklog(:,1)*3600+t_labjacklog(:,2)*60+t_labjacklog(:,3); % Labjack acq times [s]
V_labjacklog = labjacklog(:,4); % Labjack voltages [V]

%% Find reward times from Labjack Log
i_rewards_labjack = find(diff(V_labjacklog)>0.5)+1;
t_rewards_labjack_s = t_labjacklog_s(i_rewards_labjack); % reward time of sucessful trials according to the LabJack Log

%% Read reward times from Behavior Log
% time log for each reward period (from the behavior log [s])
t_rewards_behavior_s = parseTime(behaviorSuccessOnly,'reward');

%% fixing session/run errors manually (this is an ugly fix - sorry)
%(cases where clocks were off by >1/2 avg trial length) 
if session==19
    t_rewards_behavior_s = t_rewards_behavior_s+10;
end
% case where labjack triggered at the end of a run and the behavior
% e.g. (session==23 && run==2) || (session==25 && run==1) || (session==30 && run==1)
while length(t_rewards_labjack_s) > length(t_rewards_behavior_s)
    t_rewards_labjack_s = t_rewards_labjack_s(1:end-1);
    warning('labjack recorded more rewards than behavior!')
end

%% find closest times (in behavior time) that correspond to the labjack/fUS
% timings that were reported and feed those indices back.
for k = 1:length(t_rewards_labjack_s)
    [~, i_rewards_behavior(k)] = min(abs(t_rewards_behavior_s - t_rewards_labjack_s(k))); %#ok<AGROW>
end

%% get the delay for each successful trial (calculated at reward time)
t_rewards_behavior_fUSRunning_s = t_rewards_behavior_s(i_rewards_behavior);
reward_delays = t_rewards_behavior_fUSRunning_s - t_rewards_labjack_s;

% % get trial IDs for rewarded trials in behavior log when fUS was running
% rewardTrialID = cell2mat({behaviorSuccessOnly.trialID});
% rewardTrialID_fUSRunning = rewardTrialID(i_rewards_behavior);

% interpolate reward delays back over all the trials (including aborted)
interpolated_reward_delays = NaN(size(behavior,2),1);
interpolated_reward_delays(success) = reward_delays;
interpolated_reward_delays = fillmissing(interpolated_reward_delays,'previous','EndValues','nearest'); % interp happens here

%% disp reward delays (Behavior Log - Labjack Log)
figure, subplot(121); plot(reward_delays) 
xlabel('number of successful trials'), ylabel('time delay [s]')
title(['Session ' num2str(session) ', Run ' num2str(run)])
subplot(122); plot(interpolated_reward_delays) 
xlabel('trial ID'), ylabel('interpolated time delay [s]')
title('interpolated for all trials')

%% Read memory delays from behavior log
t_mem_behavior_s = parseTime(behavior,'memory');

%% Correct t_memory with reward delay
t_mem_behavior_s = t_mem_behavior_s - interpolated_reward_delays; 

% note: this is commented out because the extra behavior gets cut off in
% 'getfUSLogIndices' which usually calls this function. Cutting it twice is
% confusing and may cause errors, so I'm passing the whole thing back now.
% t_mem_behavior_s = t_mem_behavior_s(t_mem_behavior_s > min(t_labjacklog_s));
% t_mem_behavior_s = t_mem_behavior_s(t_mem_behavior_s < max(t_labjacklog_s));

cd(startPath);
return